# -*- coding: utf-8 -*-
# meta developer: @chepuxmodules

from telethon import types
from .. import __version__, loader, utils, validators
from ..types import Config, ConfigValue
import openai
import requests


@loader.tds
class ChepuxGPTMod(loader.Module):
    """–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã chatgpt by @y9chebupelka (modded by @a1ezkfame xd)"""
    strings = {"name": "ChepuxGPT"}

    def __init__(self):
        self.config = Config(
            ConfigValue(
                option="OPENAI_API_KEY",
                default="None",
                value=self.db.get("chepuxgpt", "OPENAI_API_KEY", "None"),
                validator=validators.String(),
                doc="–í–∞—à API –∫–ª—é—á –¥–ª—è OpenAI"
            ),
            ConfigValue(
                option="MODEL",
                default="gpt-3.5-turbo",
                value=self.db.get("chepuxgpt", "MODEL", "gpt-3.5-turbo"),
                validator=validators.String(),
                doc="–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤"
            )
        )

    async def gptcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .gpt <–≤–æ–ø—Ä–æ—Å> –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        
        if self.config["OPENAI_API_KEY"] is None:
            await utils.answer(message, "<b><emoji document_id=5325960528818872589>üí¢</emoji> –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ API –∫–ª—é—á –¥–ª—è OpenAI –≤ –∫–æ–Ω—Ñ–∏–≥–µ –º–æ–¥—É–ª—è.</b>")
            return
        
        api_key = self.config["OPENAI_API_KEY"]
        question = utils.get_args_raw(message)
        
        if not question:
            reply = await message.get_reply_message()
            if reply:
                question = reply.raw_text
            else:
                await utils.answer(message, "<b><emoji document_id=5325652987685642265>üîç</emoji> –í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å.</b>")
                return

        prompt = [{"role": "user", "content": question}]

        await message.edit("<b><emoji document_id=5325880328894554534>ü¶ä</emoji> –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...</b>")
        
        try:
            client = openai.AsyncOpenAI(api_key=api_key)
            response = await client.chat.completions.create(
                model=self.config["MODEL"],
                messages=prompt
            )
            answer = response.choices[0].message.content
            await utils.answer(message, f"<b><emoji document_id=5328085932040003949>üî´</emoji> –í–æ–ø—Ä–æ—Å:</b> {question}\n<b><emoji document_id=5325583039848260951>ü§ì</emoji> –û—Ç–≤–µ—Ç:</b> {answer}")
        except openai.error.Timeout as e:
            await utils.answer(message, f"<b>‚ùóÔ∏è TimeOut! –∏—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. {e}</b>")
        except openai.error.APIError as e:
            await utils.answer(message, f"<b>‚ùóÔ∏è APIError! –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ API! {e}</b>")
        except openai.error.APIConnectionError as e:
            await utils.answer(message, f"<b>‚ùóÔ∏è APIConnectionError! –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API! {e}</b>")
        except openai.error.InvalidRequestError as e:
            await utils.answer(message, f"<b>‚ùóÔ∏è InvalidRequestError! –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å! {e}</b>")
        except openai.error.AuthenticationError as e:
            await utils.answer(message, f"<b>‚ùóÔ∏è AuthenticationError! –ù–µ—Ä–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω! {e}</b>")
        except openai.error.PermissionError as e:
            await utils.answer(message, f"<b>‚ùóÔ∏è PermissionError! –£ –≤–∞—Å –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É! {e}</b>")
        except openai.error.RateLimitError as e:
            await utils.answer(message, f"<b>‚ùóÔ∏è RateLimitError! –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ API! {e}</b>")
